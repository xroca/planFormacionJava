/* Generated by Together */
package com.curso.usojdbcmysql.practicas;

import java.sql.BatchUpdateException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Emplea los tipos de ResultSet de JDBC y los utiliza para mostrar cómo podemos movernos a través de ellos.
 * @author JMD
 * @version 1.0
 */
public class Practica_007 extends PracticaBase {

    public static void main(String[] args) {
        try {
            Practica_007 p = new Practica_007();
            p.ejecutar();
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(Practica_007.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void mostrarResultados(final ResultSet rs, boolean direccion) throws SQLException {
        if (direccion) {
            for (int i = 1; rs.next(); i++) {
                String nombre = rs.getString("Nombre");
                String apellido = rs.getString("Apellidos");
                System.out.println("Fila " + i + ": " + nombre + " " + apellido);
            }
        } else {
            for (int i = 1; rs.previous(); i++) {
                String nombre = rs.getString("Nombre");
                String apellido = rs.getString("Apellidos");
                System.out.println("Fila " + i + ": " + nombre + " " + apellido);
            }
        }
    }

    private void insercionEnModoBatch() {
        PreparedStatement st = null;
        try {
            final String ordenSQL = "INSERT INTO CONTACTOS (NOMBRE,APELLIDOS) VALUES(?,?)";
            final int veces = 5;
            System.out.println("Realizando inserci�n en modo batch...");
            st = con.prepareStatement(ordenSQL);
            con.setAutoCommit(false);
            for (int i = 0; i < veces; i++) {
                st.setString(1, "ABC");
                st.setString(2, "XYZ");
                st.addBatch();
            }
            int[] filas = st.executeBatch();
            con.commit();
            con.setAutoCommit(true);
            for (int i = 0; i < filas.length; i++) {
                System.out.println("Filas afectadas: " + filas[i]);
            }
        } catch (BatchUpdateException b) {
            System.out.println("Filas afectadas por las �rdenes ejecutadas correctamente: ");
            int[] filas = b.getUpdateCounts();
            for (int i = 0; i < filas.length; i++) {
                System.out.print(filas[i] + "  ");
            }
            System.out.println();
        } catch (SQLException e) {
            System.out.println("Error al insertar.");
            try {
                con.rollback();
            } catch (SQLException ex) {
                System.out.println("Error al intentar realizar un rollback.");
                Logger.getLogger(Practica_007.class.getName()).log(Level.SEVERE, null, ex);
            }
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException ex) {
                    Logger.getLogger(Practica_007.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    private void actualizacion() throws SQLException {
        Statement st = null;
        st = con.createStatement();
        final String ordenSQL = "UPDATE CONTACTOS SET APELLIDOS = '123' WHERE NOMBRE = 'ABC'";
        System.out.println("Realizando actualizaci�n...");
        int filas = st.executeUpdate(ordenSQL);
        System.out.println("Filas afectadas: " + filas);
        if (st != null) {
            st.close();
        }
    }

    private void borrado() throws SQLException {
        Statement st = null;
        st = con.createStatement();
        final String ordenSQL = "DELETE FROM CONTACTOS WHERE APELLIDOS = '123'";
        System.out.println("Realizando borrado...");
        int filas = st.executeUpdate(ordenSQL);
        System.out.println("Filas afectadas: " + filas);
        if (st != null) {
            st.close();
        }
    }

    @Override
    protected void seleccion() throws SQLException {
        Statement st = null;
        ResultSet rs = null;
        st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
        final String ordenSQL = "SELECT * FROM CONTACTOS";
        System.out.println("Realizando consulta...");
        rs = st.executeQuery(ordenSQL);
        mostrarResultados(rs, true);
        if (rs != null) {
            rs.close();
        }
        if (st != null) {
            st.close();
        }
    }

    private void movimiento() throws SQLException {
        Statement st = null;
        ResultSet rs = null;
        st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
        final String ordenSQL = "SELECT * FROM CONTACTOS";
        System.out.println("Realizando movimientos en el ResultSet...");
        rs = st.executeQuery(ordenSQL);
        rs.first();
        System.out.println("Al principio. En fila :" + rs.getRow());
        rs.absolute(3);
        System.out.println("Movimiento absoluto. En fila :" + rs.getRow());
        rs.relative(-1);
        System.out.println("Movimiento relativo. En fila :" + rs.getRow());
        rs.last();
        System.out.println("Al final. En fila :" + rs.getRow());
        rs.next();
        System.out.println("Mostrando resultados desde el final del ResultSet...");
        mostrarResultados(rs, false);
        if (rs != null) {
            rs.close();
        }
        if (st != null) {
            st.close();
        }
    }

    protected void accionEspecifica() throws SQLException {
        insercionEnModoBatch();
        seleccion();
        actualizacion();
        borrado();
        seleccion();
        movimiento();
    }
}
