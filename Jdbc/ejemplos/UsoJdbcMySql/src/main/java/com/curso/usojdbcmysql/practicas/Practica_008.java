/* Generated by Together */
package com.curso.usojdbcmysql.practicas;

import java.sql.BatchUpdateException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Realiza una inserción, un borrado y una actualización desde el ResultSet.
 * @author JMD
 * @version 1.0
 */
public class Practica_008 extends PracticaBase {

    public static void main(String[] args) {
        try {
            Practica_008 p = new Practica_008();
            p.ejecutar();
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(Practica_008.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void mostrarResultados(final ResultSet rs, boolean direccion) throws SQLException {
        if (direccion) {
            for (int i = 1; rs.next(); i++) {
                String nombre = rs.getString("Nombre");
                String apellido = rs.getString("Apellidos");
                System.out.println("Fila " + i + ": " + nombre + " " + apellido);
            }
        } else {
            for (int i = 1; rs.previous(); i++) {
                String nombre = rs.getString("Nombre");
                String apellido = rs.getString("Apellidos");
                System.out.println("Fila " + i + ": " + nombre + " " + apellido);
            }
        }
    }

    @Override
    protected void seleccion() throws SQLException {
        Statement st = null;
        ResultSet rs = null;
        st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
        final String ordenSQL = "SELECT * FROM CONTACTOS";
        System.out.println("Realizando consulta...");
        rs = st.executeQuery(ordenSQL);
        mostrarResultados(rs, true);
        if (rs != null) {
            rs.close();
        }
        if (st != null) {
            st.close();
        }
    }

    private void insercionDesdeElResultSet() throws SQLException {
        Statement st = null;
        ResultSet rs = null;
        st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
        final String ordenSQL = "SELECT * FROM CONTACTOS";
        rs = st.executeQuery(ordenSQL);
        System.out.println("Inserci�n desde el ResultSet...");
        rs.moveToInsertRow();
        rs.updateString(2, "INSERTADO");
        rs.updateString(3, "INSERTADO");
        rs.insertRow();
        System.out.println("Inserci�n realizada");
        if (rs != null) {
            rs.close();
        }
        if (st != null) {
            st.close();
        }
    }

    private void borradoDesdeElResultSet() throws SQLException {
        Statement st = null;
        ResultSet rs = null;
        st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
        final String ordenSQL = "SELECT ID, NOMBRE, APELLIDOS FROM CONTACTOS";
        rs = st.executeQuery(ordenSQL);
        System.out.println("Borrando la primera fila...");
        rs.first();
        rs.deleteRow();
        System.out.println("Primera fila borrada.");
        if (rs != null) {
            rs.close();
        }
        if (st != null) {
            st.close();
        }
    }

    private void actualizacionDesdeElResultSet() throws SQLException {
        Statement st = null;
        ResultSet rs = null;
        st = con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
        final String ordenSQL = "SELECT ID, NOMBRE, APELLIDOS FROM CONTACTOS ";
        rs = st.executeQuery(ordenSQL);
        System.out.println("Actualizaci�n...");
        rs.absolute(1);
        String str = rs.getString("Nombre");
        System.out.println(str);
        rs.updateString("Nombre", "hola");
        rs.updateRow();
        str = rs.getString("Nombre");
        System.out.println(str);
        System.out.println("Actualizaci�n realizada");
        if (rs != null) {
            rs.close();
        }
        if (st != null) {
            st.close();
        }
    }

    private void insercionEnModoBatch() {
        PreparedStatement st = null;
        try {
            final String ordenSQL = "INSERT INTO CONTACTOS (NOMBRE,APELLIDOS) VALUES(?,?)";
            final int veces = 5;
            System.out.println("Realizando inserci�n en modo batch...");
            st = con.prepareStatement(ordenSQL);
            con.setAutoCommit(false);
            for (int i = 0; i < veces; i++) {
                st.setString(1, "ABC");
                st.setString(2, "XYZ");
                st.addBatch();
            }
            int[] filas = st.executeBatch();
            con.commit();
            con.setAutoCommit(true);
            for (int i = 0; i < filas.length; i++) {
                System.out.println("Filas afectadas: " + filas[i]);
            }
        } catch (BatchUpdateException b) {
            System.out.println("Filas afectadas por las �rdenes ejecutadas correctamente: ");
            int[] filas = b.getUpdateCounts();
            for (int i = 0; i < filas.length; i++) {
                System.out.print(filas[i] + "  ");
            }
            System.out.println();
        } catch (SQLException e) {
            System.out.println("Error al insertar.");
            try {
                con.rollback();
            } catch (SQLException ex) {
                System.out.println("Error al intentar realizar un rollback.");
                Logger.getLogger(Practica_008.class.getName()).log(Level.SEVERE, null, ex);
            }
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException ex) {
                    Logger.getLogger(Practica_008.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    protected void accionEspecifica() throws SQLException {
        insercionEnModoBatch();
        seleccion();
        borradoDesdeElResultSet();
        actualizacionDesdeElResultSet();
        insercionDesdeElResultSet();
        seleccion();
    }
}
